name: Expressjs-API

on:
  push:
    branches: [ "main" ]
  
jobs:
  Expressjs-API-Build-Tag-Push:
    runs-on: ubuntu-latest
    steps:
    
  # Checkout "femi-olaniran-IS27-devops-specialist-competition-req99120" Github Repository
      - name: Checkout Source Code from Github Repository
        uses: actions/checkout@v3
   
   # Login to DockerHub Image Repository
      - name: Login to DockerHub
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
      
   # Build the Expressjs API Application Image via docker-compose
      - name: Build the Docker Image
        run: |
          docker-compose build expressjs-api
      
   # View docker images located in github action run (Troubleshoot purpose)
      - name: Docker List All Images
        run: |
          docker image ls 
      
   # Tag Docker Image built with latest
      - name: Docker Tag Version
        run: |
          docker tag femi-olaniran-is27-devops-specialist-competition-req99120_expressjs-api ${{ secrets.DOCKERHUB_USERNAME }}/expressjs-api:latest

  # Push docker image to DockerHub Repository  
      - name: Docker Push Version
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/expressjs-api:latest
   

  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: [ Expressjs-API-Build-Tag-Push ]
    steps:
    
      # Checkout code from GitHub Repository
      - name: Checkout GitHub Repository
        uses: actions/checkout@v3

      - name: Login to Openshift Cluster
        uses: redhat-actions/oc-login@v1
        with: 
          openshift_server_url: ${{ secrets.OPENSHIFT4_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT4_TOKEN }}
          
      # Deploy to Dev using helper script "deploy.sh"
      - name: Deploy to Dev
        env:
          NAMESPACE: "${{ secrets.NAMESPACE }}"
          APPLICATION_NAME: "${{ secrets.APPLICATION_NAME }}"
          ENVIRONMENT: "${{ secrets.ENVIRONMENT }}"
          DC_TEMPLATE: "expressjs-api-dc-template.yaml"
          SERVICE_TEMPLATE: "expressjs-api-service-template.yaml"
          ROUTE_TEMPLATE: "expressjs-api-route-template.yaml"
          IMAGESTREAM: "expressjs-api"
        run: |
          ./.github/helpers/deploy.sh 
  
  
  health-check-in-dev:
    runs-on: ubuntu-latest
    needs: [ deploy-to-dev ]
    steps:
    
      # Checkout code from GitHub Repository
      - name: Checkout GitHub Repository
        uses: actions/checkout@v3
    
      - name: Login to Openshift Silver Cluster
        uses: redhat-actions/oc-login@v1
        with: 
          openshift_server_url: ${{ secrets.OPENSHIFT4_SERVER_URL }}
          openshift_token: ${{ secrets.OPENSHIFT4_TOKEN }}
                      
      # Post deployment monitoring of readiness/liveness probe response using helper script "app_health.sh"
      - name: Health Check for Dev deployment
        env:
          NAMESPACE: "${{ secrets.NAMESPACE }}"
          APPLICATION_NAME: "${{ secrets.APPLICATION_NAME }}"
          ENVIRONMENT: "${{ secrets.ENVIRONMENT }}"
        run: |
          ./.github/helpers/app-health.sh        
